/**
 * Titanium SDK Library for Node.js
 * Copyright (c) 2012 by Appcelerator, Inc. All Rights Reserved.
 * Please see the LICENSE file for information about licensing.
 */

var ti = require('./titanium'),
	appc = require('node-appc'),
	afs = appc.fs,
	async = require('async'),
	fs = require('fs'),
	path = require('path'),
	exec = require("child_process").exec;

exports.detect = function (projectDir, logger, callback) {
	var searchPaths = (projectDir ? [projectDir] : []).concat(appc.environ.os.sdkPaths.map(function (p) {
			return afs.resolvePath(p);
		})),
		plugins = {};
	
	function searchPluginDir(pluginName, pluginPath) {
		afs.visitDirsSync(pluginPath, function (version, versionPath) {
			var pluginFile = path.join(versionPath, 'plugin.py');
			if (afs.exists(pluginFile)) {
				var plugin = plugins[pluginName] || (plugins[pluginName] = {});
				plugin[version] = pluginFile;
				logger && logger.debug(__('Detected plugin: %s %s @ %s', pluginName.cyan, version, pluginFile));
			}
		});
	}
	
	async.parallel(searchPaths.map(function (titaniumRoot) {
		return function(cb) {
			afs.exists(titaniumRoot, function (exists) {
				if (!exists) return cb();
				
				// search plugin directories
				var pluginRoot = path.join(titaniumRoot, 'plugins');
				logger && logger.debug(__('Detecting plugins in %s', pluginRoot.cyan));
				afs.visitDirs(pluginRoot, searchPluginDir, cb);
			});
		};
	}), function () {
		callback(plugins);
	});
};

exports.find = function (plugins, projectDir, logger, callback) {
	var result = {
			found: [],
			missing: []
		};
	
	// if there are plugins to find, then just exit now
	if (!plugins || !plugins.length) return callback(result);
	
	exports.detect(projectDir, logger, function (installed) {
		plugins.forEach(function (plugin) {
			logger && logger.debug(__('Looking for Titanium plugin id: %s, version: %s', plugin.id.cyan, plugin.version.cyan));
			if (plugin.id && installed[plugin.id]) {
				var info,
					found,
					j = 0,
					versions;
				
				if (plugin.version) {
					info = installed[plugin.id][plugin.version];
					if (info) {
						plugin.info = info;
						result.found.push(plugin);
						found = true;
					}
				} else {
					// no version, scan newest versions for the first one to match this platform
					versions = Object.keys(installed[plugin.id]).sort().reverse();
					while (j < versions.length) {
						info = installed[plugin.id][versions[j++]];
						if (info) {
							plugin.info = info;
							result.found.push(plugin);
							found = true;
							break;
						}
					}
				}
				found || result.missing.push(plugin);
			} else {
				logger && logger.warn(__('Could not find Titanium plugin id: %s, version: %s, platform: %s', plugin.id, plugin.version, plugin.platform));
				result.missing.push(plugin);
			}
		});
		
		callback(result);
	});
};
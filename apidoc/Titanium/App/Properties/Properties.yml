---
name: Titanium.App.Properties
summary: |
    The App Properties module is used for storing application-related data in property/value pairs 
    that persist beyond application sessions and device power cycles.
description: |
    
extends: Titanium.Module
since: "0.5"

methods:
  - name: getBool
    summary: Returns the value of a property as a boolean data type.
    returns:
        type: Boolean
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: default
        summary: Default value to return if property does not exist.
        type: Boolean
        optional: true
        
  - name: getDouble
    summary: Returns the value of a property as a double (double-precision, floating point) data type.
    description: |
        This method must only be used to retrieve properties created with 
        [setDouble](Titanium.App.Properties.setDouble).  
    returns:
        type: Number
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: default
        summary: Default value to return if property does not exist.
        type: Number
        optional: true
        
  - name: getInt
    summary: |
        Returns the value of a property as an integer data type.
    description: |
        This method must only be used to retrieve properties created with 
        [setInt](Titanium.App.Properties.setInt).  
        
        Use [getDouble](Titanium.App.Properties.getDouble) and [setDouble](Titanium.App.Properties.setDouble) 
        to store values outside the integer data type range of `-2,147,483,648` to `2,147,483,647`.
    returns:
        type: Number
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: default
        summary: Default value to return if property does not exist.
        type: Number
        optional: true
        
  - name: getList
    summary: Returns the value of a property as an array data type.
    returns:
        type: Array<Object>
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: default
        summary: Default value to return if property does not exist.
        type: Array<Object>
        optional: true
         
  - name: getObject
    summary: Returns the value of a property as an object.
    returns:
        type: Object
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: default
        summary: Default value to return if property does not exist.
        type: Object
        optional: true
        
  - name: getString
    summary: Returns the value of a property as a string data type.
    returns:
        type: String
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: default
        summary: Default value to return if property does not exist.
        type: String
        optional: true
        
  - name: hasProperty
    summary: Indicates whether a property exists.
    returns:
        type: Boolean
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
  - name: listProperties
    summary: Returns an array of property names.
    returns:
        type: Array<Object>
        
  - name: removeProperty
    summary: Removes a property if it exists, or does nothing otherwise.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
  - name: setBool
    summary: |
        Sets the value of a property as a boolean data type. The property will be created if it 
        does not exist.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: value
        summary: Property value.
        type: Boolean
        
  - name: setDouble
    summary: |
        Sets the value of a property as a double (double-precision, floating point) data type. The 
        property will be created if it does not exist.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: value
        summary: Property value.
        type: Number
        
  - name: setInt
    summary: |
        Sets the value of a property as an integer data type. The property will be created if it 
        does not exist.
    description: |
        Use [getDouble](Titanium.App.Properties.getDouble) and [setDouble](Titanium.App.Properties.setDouble) 
        to store values outside the integer data type range of `-2,147,483,648` to `2,147,483,647`.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: value
        summary: Property value, within the range `-2,147,483,648` to `2,147,483,647`.
        type: Number
        
  - name: setList
    summary: |
        Sets the value of a property as an array data type. The property will be created if it 
        does not exist.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: value
        summary: Property value.
        type: Array<Object>
        
  - name: setObject
    summary: |
        Sets the value of a property as an object data type. The property will be created if it 
        does not exist.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: value
        summary: Property value.
        type: Object
        
  - name: setString
    summary: |
        Sets the value of a property as a string data type. The property will be created if it 
        does not exist.
    parameters:
      - name: property
        summary: Name of property.
        type: String
        
      - name: value
        summary: Property value.
        type: String
        
events:
  
  - name: change
    summary: Fired when a property is changed.
    description: |
        On iOS, the event is fired when the user re-enters the application after 
        making a change using the Settings application.

        The event is also fired when the application changes a property directly using one of the 
        `Ti.App.Properties` methods.
    platforms: [iphone, ipad]
    since: "3.0.0"

examples:
  - title: Store a property
    example: |
        Store a string property.
        
            Ti.App.Properties.setString('givenName', 'Paul');
            Ti.API.info('The value of the givenName property is: ' + Ti.App.Properties.getString('givenName'));
            
  - title: Enumerate over saved properties
    example: |
        Output all saved properties to the console.
        
            var props = Ti.App.Properties.listProperties();
            
            for (var i=0, ilen=props.length; i<ilen; i++){
                var value = Ti.App.Properties.getString(props[i]);
                Ti.API.info(props[i] + ' = ' + value);
            }
        

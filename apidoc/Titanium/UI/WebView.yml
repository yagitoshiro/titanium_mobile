---
name: Titanium.UI.WebView
summary: |
    The web view allows you to open an HTML5 based view which can load either local or remote content. 
description: |
    The web view content can be any valid web content such as HTML, PDF, SVG or other WebKit supported 
    content types. 

    JavaScript in the web view executes in its own context. When running local web content
    (that is, content that is included in the application's resources), scripts have
    access to the Titanium namespace. In particular, when running local web content:
    
    - You can use <Titanium.App.addEventListener> and
      <Titanium.App.fireEvent> to receive and send application-level events.

    - Events can be logged using the <Titanium.API> logging methods. 

    Scripts downloaded from remote web servers cannot access the Titanium namespace,
    however, you can use the web view [evalJS](Titanium.UI.WebView.evalJS) method 
    to execute a JavaScript expression inside the web view, and retrieve the value 
    of an expression.
    
    Use the <Titanium.UI.createWebView> method to create a web view.

    Web views are more expensive to create than other native views because of the requirement to
    load the HTML browser into memory.
    
    #### iOS Platform Implementation Notes

    On the iOS platform, the native web view handles scrolling and other related touch
    events internally. If you add event listeners on the web view **or its parent views**
    for any of the standard touch events (`touchstart`, `click`, and so on), these events
    do not reach the native web view, and the user will not be able to scroll, zoom, click
    on links, and so on. To prevent this default behavior, set
    [willHandleTouches](Titanium.UI.WebView.willHandleTouches) to `false`.
    
    In other words, you can have either Titanium-style events against the 
    web view instance, or internal JavaScript events in the DOM, but not both.

    #### Android Platform Implementation Notes

    The Android web view supports native plugins such as Flash Player. To use plugin
    content, you must set the [pluginState](Titanium.UI.WebView.pluginState) property to
    either [WEBVIEW_PLUGINS_ON](Titanium.UI.Android.WEBVIEW_PLUGINS_ON) or 
    [WEBVIEW_PLUGINS_ON_DEMAND](Titanium.UI.Android.WEBVIEW_PLUGINS_ON_DEMAND).

    You must also call [pause](Titanium.UI.WebView.pause) when the current activity is
    paused, to prevent plugin content from continuing to run in the background. Call
    [resume](Titanium.UI.WebView.resume) when the current activity is resumed. You can
    do this by adding listeners for the [Activity.pause](Titanium.Android.Activity.pause)
    and [Activity.resume](Titanium.Android.Activity.resume) events.

    #### For More Information
    
    See [Integrating Web
    Content](http://docs.appcelerator.com/titanium/2.1/index.html#!/guide/Integrating_Web_Content)
    in the Titanium Mobile Guides for more information on using web views, including use
    cases, more code examples, and best practices for web view content.


extends: Titanium.UI.View
excludes: { methods: [ add ] }
since: "0.8"
methods:

  - name: setHtml
    summary: Sets the value of [html](Titanium.UI.WebView.html) property.
    description: |
      In iOS, there are additional parameters `baseURL` and `mimeType` that can be used to configure
      the WebView main content presentation. For example:
              
          setHtml('<html><body>Hello, <a href="/documentation">Titanium</a>!</body></html>',
                  {baseURL:'http://developer.appcelerator.com/'})
    platforms: [iphone, ipad, mobileweb]
    parameters:

      - name: html
        summary: New HTML to display in the web view.
        type: Object

      - name: baseURL
        summary: The base URL for the content. Only used by iOS.
        optional: true
        type: String

      - name: mimeType
        summary: The MIME type of the content. Only used by iOS.
        optional: true
        type: String
        default: 'text/html'
        

  - name: canGoBack
    summary: Returns `true` if the web view can go back in its history list.
    description: |
        For Mobile Web, returns true if `url` is set.
    returns:
        type: Boolean

  - name: canGoForward
    summary: Returns `true` if the web view can go forward in its history list.
    description: |
        For Mobile Web, returns true if `url` is set.
    returns:
        type: Boolean

  - name: evalJS
    summary: |
        Evaluates a JavaScript expression inside the context of the web view and
        optionally, returns a result.
    description: |
        The JavaScript expression must be passed in as a string. If you are passing in any objects,
        you must serialize them to strings using [stringify](Global).

        The `evalJS` method returns a string representing the value of the expression. For
        example, the following call retrieves the `document.title` element from the
        document currently loaded into the web view.
        
            var docTitle = myWebView.evalJS('document.title');

        It is not necessary to include `return` in the JavaScript. In fact, the following
        call returns the empty string:

            myWebView.evalJS('return document.title');

        For Mobile Web, you can only execute JavaScript when the contents are on the same domain.
    returns:
        type: String
    parameters:

      - name: code
        summary: JavaScript code as a string. The code will be evaluated inside the web view context.
        type: String

  - name: goBack
    summary: Goes back one entry in the web view's history list, to the previous page.
    description: |
        For Mobile Web, you can only go back for same domain pages. If you set the initial `url` to a 
        remote page, the back function will not work. If you load a local page, then the user navigates 
        away to a remote page, you cannot go back.

  - name: goForward
    summary: Goes forward one entry in this web view's history list, if possible.
    description: |
        For Mobile Web, you can only go forward for same domain pages. If you set the initial `url` 
        to a remote page, the forward function will not work.

  - name: pause
    summary: Pauses native webview plugins. 
    description: |
        Add a `pause` handler to your <Titanium.Android.Activity> and invoke
        this method to pause native plugins. This is important with Flash content 
        as it will continue in the background unless this method is invoked.

        Call [resume](Titanium.UI.WebView.resume) to unpause native plugins.
    since: "1.8.0"
    platforms: [android]

  - name: reload
    summary: Reloads the current webpage.
    description: |
        For Mobile Web, when you reload, the last visited same domain page or the original `url` 
        is the page that is reloaded.

        You may need to simply reset the `url` property to reinitialize the WebView's iframe. 
        Reloading the web view will reset the history.

  - name: repaint
    summary: Forces the web view to repaint its contents.
    platforms: [iphone, ipad]
    
  - name: release
    summary: Releases memory when the web view is no longer needed.
    since: "2.0.0"
    platforms: [android]

  - name: resume
    summary: Resume native webview plugins. 
    description: |
        Used to unpause native plugins after calling [pause](Titanium.UI.WebView.pause).

        Add a `resume` handler to your <Titanium.Android.Activity> and invoke
        this method to resume native plugins.
    since: "1.8.0"
    platforms: [android]

  - name: setBasicAuthentication
    summary: |
        Sets the basic authentication for this web view to use on subsequent URl requests.
    platforms: [android, iphone, ipad]
    parameters:

      - name: username
        summary: Basic auth username.
        type: String

      - name: password
        summary: Basic auth password.
        type: String

  - name: stopLoading
    summary: Stops loading a currently loading page.
    description: |
        For Mobile Web, due to browser permissions, this will issue a stop on all windows including 
        the parent and all other web views.  Generally, this feature does not work reliably and instead 
        you may choose to set the `hardStop` argument to true.

        When `hardStop` is set to `true`, the Mobile Web platform will destroy the iFrame
        used to display the content, so nothing is displayed where the web view used to
        be. The actual web view component is *not* destroyed, and you can redisplay it by
        calling [reload](Titanium.UI.WebView.reload), or by specifying new content.
    parameters:
      - name: hardStop
        summary: Forces the web view to destroy the iFrame (Mobile Web only).
        type: Boolean

events:

  - name: beforeload
    summary: Fired before the web view starts loading its content.
    description: |
        For Mobile Web, if you pass the `url` into the constructor, you must attach the event listener 
        before adding the web view to its parent, otherwise the event will fire before you have a 
        chance to add the event listener.
        
        This event does not fire when navigating remote web pages.
    properties:
      - name: url
        summary: URL of the web document being loaded.

      - name: navigationType
        summary: |
            Constant indicating the user's action:
            <Titanium.UI.iOS.WEBVIEW_NAVIGATIONTYPE_LINK_CLICKED>,
            <Titanium.UI.iOS.WEBVIEW_NAVIGATIONTYPE_FORM_SUBMITTED>,
            <Titanium.UI.iOS.WEBVIEW_NAVIGATIONTYPE_BACK_FORWARD>,
            <Titanium.UI.iOS.WEBVIEW_NAVIGATIONTYPE_RELOAD>,
            <Titanium.UI.iOS.WEBVIEW_NAVIGATIONTYPE_FORM_RESUBMITTED>, or
            <Titanium.UI.iOS.WEBVIEW_NAVIGATIONTYPE_OTHER>.
        type: Number
        platforms: [ipad, iphone]

  - name: error
    summary: Fired when the web view cannot load the content. 
    description: |
        For Mobile Web, generally this event will **not** fire, even for 404, 500, and invalid URLs.
        The `errorCode` value refers to one of the <Titanium.UI> URL_ERROR constants or, if it does not
        match one of those constants, it refers to a platform-specific constant. The platform-specific
        values are underlying [iOS NSURLError*](https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_Constants/Reference/reference.html#//apple_ref/doc/uid/TP40003793-CH3g-SW40)
        or [Android WebViewClient ERROR_*](http://developer.android.com/reference/android/webkit/WebViewClient.html) constants.
    properties:
      - name: url
        summary: URL of the web document.
        type: String
        platforms: [iphone, ipad, mobileweb, android]
      - name: message
        summary: Error message.
        type: String
        platforms: [iphone, ipad, mobileweb, android]
      - name: errorCode
        summary: A <Titanium.UI> URL_ERROR_* constant or underlying platform specific error code.
        type: Number
        platforms: [iphone, ipad, android]

  - name: load
    summary: Fired when the web view content is loaded.
    description: |
        For Mobile Web, the `url` returned in the load event is generally accurate when loading 
        same domain pages and remote pages that you explicitly set using the `url` property. 
        If you navigate to a remote page, then this `url` is set to the initial remote page's URL.
    properties:
      - name: url
        summary: URL of the web document. 

properties:

  - name: data
    summary: Web content to load.
    description: |
        Android only supports loading data from a `Blob`, not a `File`.

        For Mobile Web, setting new content will reset the `url` and the WebView's history. The WebView's
        "onload" event will have already fired prior to the data being set inside the WebView.

        See also: [url](Titanium.UI.WebView.url) and [html](Titanium.UI.WebView.html).
    type: [Titanium.Blob, Titanium.Filesystem.File]

  - name: disableBounce
    summary: |
        Determines whether the view will bounce when scrolling to the edge of the scrollable region.
    description: |
        Set to `true` to disable the bounce effect.
    type: Boolean
    default: false
    platforms: [iphone, ipad]

  - name: hideLoadIndicator
    summary: Hides activity indicator when loading remote URL.
    type: Boolean
    platforms: [iphone, ipad]
    since: "3.0.0"
    default: false

  - name: html
    summary: HTML content of this web view.
    description: |
        On Android, This property is read-only. On other platforms, it is read-write and can 
        be used to set the web view's content. 

        On all platforms the web view's content can be set using the [data](Titanium.UI.WebView.data) or 
        [url](Titanium.UI.WebView.url) properties.
        
        For iOS, see [setHtml](Titanium.UI.WebView.setHtml) for additional parameters that can be
        specified when setting HTML content.

        For Mobile Web, setting new content will reset the `url` and the WebView's history. The WebView's
        "onload" event will have already fired prior to the data being set inside the WebView. When 
        querying this value, mobile web will pass in a formatted version of the html. The `<html>` tag is
        stripped of, along with comments outside of the `<html>` tag. Some default attributes may be added
        as well. For example, a web page with the code `<html><head></head><body>hello</body></html>` returns
        `"<head></head><body marginwidth="0" marginheight="0">hello</body>"` in Safari.
    type: String

  - name: loading
    summary: Indicates if the webview is loading content.
    type: Boolean

  - name: pluginState
    summary: Determines how to treat content that requires plugins in this web view.
    description: |
        This setting affects the loading of content that requires web plugins, such as
        Flash Player.
        
        Accepts one of <Titanium.UI.Android.WEBVIEW_PLUGINS_OFF>, 
        <Titanium.UI.Android.WEBVIEW_PLUGINS_ON>, or <Titanium.UI.Android.WEBVIEW_PLUGINS_ON_DEMAND>.

        To use the Flash Player plugin, hardware acceleration must be enabled for your
        application. To enable hardware acceleration, add the `tool-api-level` and
        `manifest` elements shown below inside the `android` element in your `tiapp.xml` file.

            <android xmlns:android="http://schemas.android.com/apk/res/android">
                <tool-api-level>11</tool-api-level>
                <manifest>
                    <application android:hardwareAccelerated="true"/>
                </manifest>
            </android>

        See Android documentation for 
        [WebSettings.PluginState](http://developer.android.com/reference/android/webkit/WebSettings.PluginState.html). 
        
        This property only works on Android devices at API Level 8 or greater.
    type: Number
    platforms: [android]
    since: "1.8.0"
    default: <Titanium.UI.Android.WEBVIEW_PLUGINS_OFF>

  - name: scrollsToTop
    summary: Controls whether the scroll-to-top gesture is effective.
    description: |
        The scroll-to-top gesture is a tap on the status bar; The default value of this property is true. 
        This gesture works when you have a single visible web view.
        If there are multiple table views, web views, text areas, and/or scroll views visible,
        you will need to disable (set to false) on the above views you DON'T want this
        behaviour on. The remaining view will then respond to scroll-to-top gesture. 
    type: Boolean
    default: true
    platforms: [iphone,ipad]
    since: 2.0.0

  - name: showScrollbars
    summary: If `true`, scrollbars are displayed if content is larger than the web view.
    type: Boolean
    platforms: [mobileweb]
    since: "1.8.2"
    default: true

  - name: enableZoomControls
    summary: If `true`, zoom controls are enabled.
    type: Boolean
    platforms: [android]
    since: "1.8.0"
    default: true

  - name: scalesPageToFit
    summary: If `true`, scale contents to fit the web view.
    description: |
        On iOS, setting this to `true` sets the initial zoom level to show the entire
        page, and enables the user to zoom the web view in and out. Setting this to 
        `false` prevents the user from zooming the web view.

        On Android, only controls the initial zoom level.
    platforms: [android, iphone, ipad]
    type: Boolean
    default: |
        `false` on iOS. On Android, `false` when content is specified as a local URL, 
        `true` for any other kind of content (remote URL, `Blob`, or `File`).

  - name: url
    summary: URL to the web document. 
    description: |
        This property changes as the content of the webview changes (such as when the user
        clicks a hyperlink inside the web view).

        See also: [data](Titanium.UI.WebView.data) and [html](Titanium.UI.WebView.html).
    type: String

  - name: userAgent
    summary: The User-Agent header used by the web view when requesting content.
    type: String
    default: System default user-agent value.
    platforms: [android]

  - name: willHandleTouches
    summary: Explicitly specifies if this web view handles touches.
    description: |
        On the iOS platform, if this web view **or any of its parent views** have touch
        listeners, the Titanium component intercepts **all** touch events. This 
        prevents the user from interacting with the native web view components.

        Set this flag to `false` to disable the default behavior. Setting this property to `false` 
        allows the user to interact with the native web view and still honor any `touch` events sent to 
        its parents. No `touch` events will be generated when the user interacts with the web view itself.

        Set this flag to `true` if you want to receive touch events from the web view and
        the user does not need to interact with the web content directly.

        This flag is `true` by default to retain backwards compatibility with previous
        behavior.
    type: Boolean
    platforms: [iphone, ipad]
    since: "1.8.2"
    default: true

examples:
  - title: Basic Web View to External URL 
    example: |
        Create a web view to a remote URL and open the window as modal.
        
            	var webview = Titanium.UI.createWebView({url:'http://www.appcelerator.com'});
            	var window = Titanium.UI.createWindow();
            	window.add(webview);
            	window.open({modal:true});
        
        

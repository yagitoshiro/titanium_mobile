---
name: Titanium.UI.iOS.Toolbar
summary: An iOS toolbar, which can contain buttons and certain other controls.
description: |
    The toolbar is created by the <Titanium.UI.iOS.createToolbar> method. 
    
    A toolbar can contain buttons, as well as certain other widgets, including text fields and 
    labels. 
    
    To provide spacing between items in the toolbar, you can use the special iOS system button types, 
    [FIXED_SPACE](Titanium.UI.iPhone.SystemButton.FIXED_SPACE) and 
    [FLEXIBLE_SPACE](Titanium.UI.iPhone.SystemButton.FLEXIBLE_SPACE).
    
    Note that toolbars are positioned like other views (using the `top` and `bottom` properties, 
    for example), but the iOS Human Interface Guidelines have specific requirements for placing 
    toolbars: on iPhone, a toolbar should be at the bottom of the window. On the iPad, a toolbar 
    should appear at the top or bottom of a window.

    You can specify that a border be drawn on the top or bottom of the toolbar, using the
    [borderTop](Titanium.UI.iOS.Toolbar.borderTop) and
    [borderBottom](Titanium.UI.iOS.Toolbar.borderBottom) properties. While the standard
    `borderColor`, `borderWidth`, and `borderRadius` properties are supported on toolbars,
    using these properties adds a border on all four sides of the control, which may be
    undesirable.

    See also:

    *  [Toolbar in the iOS Human Interface Guidelines.](http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/MobileHIG/UIElementGuidelines/UIElementGuidelines.html#//apple_ref/doc/uid/TP40006556-CH13-SW10)

extends: Titanium.UI.View
excludes: { properties: [ backgroundColor, backgroundDisabledColor, backgroundDisabledImage,         
            backgroundFocusedColor, backgroundFocusedImage,
            backgroundLeftCap, backgroundTopCap, backgroundRepeat,
            backgroundSelectedColor, backgroundSelectedImage, layout,
            softKeyboardOnFocus ],
            events: [ longclick, twofingertap ] }
since: "0.8"
platforms: [iphone, ipad]

properties:
  - name: barColor
    summary: Background color for the toolbar, as a color name or hex triplet.
    description: |
        To use a background image on the toolbar, either `barColor` must be a fully or
        partially transparent color, 
        or the [translucent](Titanium.UI.iOS.Toolbar.translucent) property must be `true`.

        To use a background gradient on a toolbar, `barColor` must be `'transparent'`
        *and* the the [translucent](Titanium.UI.iOS.Toolbar.translucent) property must be `true`.

        For information about color values, see the "Colors" section of <Titanium.UI>. 
    type: String
    
  - name: items
    summary: An array of buttons (or other widgets) contained in the toolbar.
    type: Array<Titanium.UI.View>
    
  - name: borderTop
    summary: If `true`, a border is drawn on the top of the toolbar.
    type: Boolean
    default: true
    
  - name: borderBottom
    summary: If `true`, a border is drawn on the bottom of the toolbar.
    type: Boolean
    default: true
    
  - name: translucent
    summary: If `true`, a translucent background color is used for the toolbar.
    description: |
        Note that if `translucent` is `false`, views under the toolbar are hidden, even
        if [barColor](Titanium.UI.iOS.Toolbar.barColor) is set to a semi-transparent or 
        transparent color.
    type: Boolean
    default: false

examples: 
  - title: Simple Toolbar
    example: |
        The following code excerpt creates a simple toolbar, placed at the bottom of the window. 
        
            var send = Titanium.UI.createButton({
                title: 'Send',
                style: Titanium.UI.iPhone.SystemButtonStyle.DONE,
            });
            
            var camera = Titanium.UI.createButton({
                systemButton: Titanium.UI.iPhone.SystemButton.CAMERA,
            });
            
            var cancel = Titanium.UI.createButton({
                systemButton: Titanium.UI.iPhone.SystemButton.CANCEL
            });
            
            flexSpace = Titanium.UI.createButton({
                systemButton:Titanium.UI.iPhone.SystemButton.FLEXIBLE_SPACE
            });
            
            var toolbar = Titanium.UI.iOS.createToolbar({
                items:[send, flexSpace, camera, flexSpace, cancel],
                bottom:0,
                borderTop:true,
                borderBottom:false
            }); 
            win.add(toolbar);
        
        Note the use of the flexible space for positioning the toolbar buttons -- the 
        `FLEXIBLE_SPACE` button doesn't appear as a button, but a variable space between the 
        controls on either side of it. Available space in the toolbar is divided between all of the 
        flexible space buttons in the toolbar. Without the flexible spaces in this example, 
        the toolbar buttons would be grouped tightly together on the left side of the toolbar.

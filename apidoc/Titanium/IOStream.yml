---
name: Titanium.IOStream
summary: IOStream is the interface that all stream types implement.
description: |
    See the <Titanium.Stream> module for related utility methods that support asynchronous
    I/O.
since: "1.7"
extends: Titanium.Proxy
createable: false
platforms: [android, iphone, ipad, mobileweb]

methods:

  - name: read
    summary: Reads data from this stream into a buffer.
    description: |
        If `offset` and `length` are specified, data is written into the buffer starting at 
        position `offset`. Data is read from this stream until one of the following occurs:

        *   the end of this stream is reached
        *   the end of the buffer is reached
        *   a total of `length` bytes have been read from the stream

        If `offset` and `length` are omitted, data is written starting at the beginning
        of the buffer.
        
        Returns the number of bytes read, or -1 if the end of stream was reached before
        any data was read.

        Throws an exception on error. For example, if the `offset` value is past
        the last byte of `buffer`. 

        This method is synchronous. To perform an asynchronous read on an `IOStream`, use
        <Titanium.Stream.read>.
    
    returns:
        type: Number
        summary: Number of bytes read.
    parameters:
      - name: buffer
        summary: Buffer to read stream data into.
        type: Titanium.Buffer

      - name: offset
        summary: |
            Offset into the buffer to start writing stream data.
            If specified, `length` must also be specified.
        type: Number
        optional: true
        default: 0

      - name: length
        summary: |
            Maximum number of bytes to read.
            If specified, `offset` must also be specified.
        type: Number
        optional: true
        default: Length of the supplied buffer.

  - name: write
    summary: Writes data from a buffer to this stream.
    description: |
        If `offset` and `length` are specified, data is read from the buffer starting at
        `offset`. Bytes are read from the buffer and written to the stream until:

        * the end of the buffer is reached
        * `length` bytes have been written
        * the stream returns an error

        If `offset` and `length` are omitted, all of the data in the buffer is written to
        this stream.
        
        Returns the number of bytes actually written.
        
        Throws an exception if an error is encountered.
    returns:
        type: Number
        summary: Number of bytes written.
    parameters:
      - name: buffer
        summary: Buffer to write to this stream.
        type: Titanium.Buffer

      - name: offset
        summary: |
            Offset in the buffer of the first byte to write to the stream.
            If specified, `length` must also be specified.
        type: Number
        optional: true
        default: 0

      - name: length
        summary: |
            Maximum number of bytes to write to the stream.
            If specified, `offset` must also be specified.
        type: Number
        optional: true
        default: Length of the supplied buffer.

  - name: isWriteable
    summary: Indicates whether this stream is writeable.
    returns:
        type: Boolean
        summary: True if stream is writeable, false otherwise.

  - name: isReadable
    summary: Indicates whether this stream is readable.
    returns:
        type: Boolean
        summary: True if stream is readable, false otherwise.

  - name: close
    summary: Closes this stream.
    description: |
        Throws an exception on error.


examples:
  - title: Write Data to a Stream
    example: |
        This example demonstrates writing data to a stream.

            var outBuffer = Ti.createBuffer({data: "write me"});
            var outStream = // stream object could be socket, file, buffer or blob
            
            var bytesWritten = outStream.write(outBuffer);  // writes entire buffer to stream
            Ti.API.info("Bytes written:" + bytesWritten);  // should be 8
            
            bytesWritten = outStream.write(outBuffer, 2, 5);  // only writes "ite m" to stream
            Ti.API.info("Bytes written:" + bytesWritten);  // should be 5

  - title: Read Data From a Stream 
    example: |
        This shows a simple example of reading data from a stream, one buffer full at a
        time. 
        
            var size = 0;
            // read data one buffer full at a time
            while ((size = instream.read(buffer)) > -1) {
                // do something with the data here ...
                Ti.API.info("Read " + size + " bytes.");
            }
            
  - title: Read Data With Offset and Length
    example: |
        This example shows how to read data from a stream into a buffer. We assume that
        the `inStream` variable holds a previously initialized stream that contains the 
        string, "World Titanium".

            var inBuffer = Ti.createBuffer({ value: "Hello [           ]" });

            // Read the first 6 bytes from the stream to the buffer, starting at position 10.
            var bytesRead = inStream.read(inBuffer, 10, 6);  

            Ti.API.info("Bytes read: " + bytesRead);
            Ti.API.info(inBuffer.toString());

            // Read the next 8  bytes from the stream to the buffer, starting at position 8.
            bytesRead = inStream.read(inBuffer, 8, 8);

            Ti.API.info("Bytes read: " + bytesRead);
            Ti.API.info(inBuffer.toString());

        The second `read` overwrites the data from the first `read`, so the output looks
        like this:

            [INFO] Bytes read: 6
            [INFO] Hello [   World   ]
            [INFO] Bytes read: 8
            [INFO] Hello [ Titanium  ]


name: Titanium.Cloud.Places
summary: Provides methods for accessing ACS places.
extends: Titanium.Module
excludes: { methods: [ 'addEventListener', 'fireEvent', 'removeEventListener',  ] }

methods:
  - name: create
    summary: Create a new place.
    description: |
        Requires user login. 
        
        See [Places: Create a Place](http://cloud.appcelerator.com/docs/api/v1/places/create)
        for the request parameters supported by this method.
        
        Data is returned in the `places` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPlacesResponse>
  
  - name: query
    summary: Retrieve a list of places with sorting and pagination.
    description: |
        See [Places: Custom Query Places](http://cloud.appcelerator.com/docs/api/v1/places/query)
        for the request parameters supported by this method.
        
        Data is returned in the `places` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        optional: true
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPlacesResponse>
  
  - name: remove
    summary: Delete a place.
    description: |
        Requires user login. 
        
        See [Places: Delete a Place](http://cloud.appcelerator.com/docs/api/v1/places/delete)
        for the request parameters supported by this method.
        
        Only the user who created the place can delete it.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPlacesResponse>
  
  - name: search
    summary: Retrieve a list of places.
    description: |
        See [Places: Search Places](http://cloud.appcelerator.com/docs/api/v1/places/search)
        for the request parameters supported by this method.
        
        Data is returned in the `places` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        optional: true
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPlacesResponse>
  
  - name: show
    summary: Retrieve information about a place.
    description: |
        See [Places: Show a Place](http://cloud.appcelerator.com/docs/api/v1/places/show)
        for the request parameters supported by this method.
        
        Data is returned in the `places` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPlacesResponse>
  
  - name: update
    summary: Update information about a place.
    description: |
        Requires user login. 
        
        See [Places: Update a Place](http://cloud.appcelerator.com/docs/api/v1/places/update)
        for the request parameters supported by this method.
        
        Only the user who created the place can update it.
        
        Data is returned in the `places` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPlacesResponse>

examples:
  - title: Create Place
    example: |
        This example creates a new place and checks the response.
        
            Cloud.Places.create({
                name: 'Appcelerator HQ',
                state: 'California',
                website: 'http://www.appcelerator.com'
            }, function (e) {
                if (e.success) {
                    var place = e.places[0];
                    alert('Success:\\n' +
                        'id: ' + place.id + '\\n' +
                        'name: ' + place.name + '\\n' +
                        'updated_at: ' + place.updated_at);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Show a Place
    example: |
        This example retrieves information about a place and checks the response.
        
            Cloud.Places.show({
                place_id: savedPlaceId
            }, function (e) {
                if (e.success) {
                    var place = e.places[0];
                    alert('Success:\\n' +
                        'id: ' + place.id + '\\n' +
                        'name: ' + place.name + '\\n' +
                        'updated_at: ' + place.updated_at);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Search for Places
    example: |
        This example searches for places and checks the response.
        
            Cloud.Places.search({
                latitude: lat,
                longitude: lon
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.places.length);
                    for (var i = 0; i < e.places.length; i++) {
                        var place = e.places[i];
                        alert('id: ' + place.id + '\\n' +
                              'name: ' + place.name + '\\n' +
                              'longitude: ' + place.longitude + '\\n' +
                              'latitude: ' + place.latitude + '\\n' +
                              'updated_at: ' + place.updated_at);
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Query for Places
    example: |
        This example requests a list of places and checks the response.
        
            Cloud.Places.query({
                page: 1,
                per_page: 20,
                where: {
                    lnglat: {
                        '$nearSphere': [-122.23,37.12],
                        '$maxDistance': 0.00126
                    }
                }
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.places.length);
                    for (var i = 0; i < e.places.length; i++) {
                        var place = e.places[i];
                        alert('id: ' + place.id + '\\n' +
                              'name: ' + place.name + '\\n' +
                              'longitude: ' + place.longitude + '\\n' +
                              'latitude: ' + place.latitude + '\\n' +
                              'updated_at: ' + place.updated_at);
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Update a Place
    example: |
        This example updates a place and checks the response.
        
            Cloud.Places.update({
                place_id: savedPlaceId,
                city: 'Mountain View'
            }, function (e) {
                if (e.success) {
                    var place = e.places[0];
                    alert('Success:\\n' +
                        'id: ' + place.id + '\\n' +
                        'name: ' + place.name + '\\n' +
                        'updated_at: ' + place.updated_at);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Remove a Place
    example: |
        This example deletes a place and checks the response.
        
            Cloud.Places.remove({
                place_id: savedPlaceId
            }, function (e) {
                if (e.success) {
                    alert('Success');
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

---
name: CloudPlacesResponse
summary: Argument passed to the callback when a request finishes successfully or erroneously.
extends: CloudResponse
properties:
  - name: places
    summary: Set of `places` objects, if any exist.
    description: Only included if `success` is `true`.
    type: Array<Dictionary>

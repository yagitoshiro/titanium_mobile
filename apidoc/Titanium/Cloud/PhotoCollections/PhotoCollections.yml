name: Titanium.Cloud.PhotoCollections
summary: Provides methods for ACS photo collections.
extends: Titanium.Module
excludes: { methods: [ 'addEventListener', 'fireEvent', 'removeEventListener',  ] }

methods:
  - name: create
    summary: Creates a photo collection.
    description: |
        Requires user login. 
        
        See [Photo Collections: Create a Photo Collection](http://cloud.appcelerator.com/docs/api/v1/collections/create)
        for the request parameters supported by this method.
        
        Data is returned in the `collections` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotoCollectionsResponse>
  
  - name: remove
    summary: Deletes an empty collection.
    description: |
        Requires user login. 
        
        See [Photo Collections: Delete a Photo Collection](http://cloud.appcelerator.com/docs/api/v1/collections/delete)
        for the request parameters supported by this method.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotoCollectionsResponse>
  
  - name: search
    summary: Retrieves a list of top-level collections owned by a user.
    description: |
        See [Photo Collections: Search Photo Collections](http://cloud.appcelerator.com/docs/api/v1/collections/search)
        for the request parameters supported by this method.
        
        Data is returned in the `collections` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotoCollectionsResponse>
  
  - name: show
    summary: Retrieves details about a photo collection.
    description: |
        See [Photo Collections: Show a Photo Collection](http://cloud.appcelerator.com/docs/api/v1/collections/show)
        for the request parameters supported by this method.
        
        Data is returned in the `collections` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotoCollectionsResponse>
  
  - name: showPhotos
    summary: Retrieves photos in a collection.
    description: |
        See [PhotoCollections: Show Photos](http://cloud.appcelerator.com/docs/api/v1/collections/photos)
        for the request parameters supported by this method.
        
        Data is returned in the `photos` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotoCollectionsPhotosResponse>
  
  - name: showSubCollections
    summary: Retrieves a list of subcollections of a collection.
    description: |
        See [Collections: Show Subcollections](http://cloud.appcelerator.com/docs/api/v1/collections/subcollections)
        for the request parameters supported by this method.
        
        Data is returned in the `collections` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotoCollectionsResponse>
  
  - name: update
    summary: Updates a photo collection.
    description: |
        Requires user login. 
        
        See [Photo Collections: Update a Photo Collection](http://cloud.appcelerator.com/docs/api/v1/collections/update)
        for the request parameters supported by this method.
        
        Data is returned in the `collections` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotoCollectionsResponse>

examples:
  - title: Create Photo Collection
    example: |
        This example creates a new photo collection and checks the response.
        
            Cloud.PhotoCollections.create({
                name: 'Party Pictures'
            }, function (e) {
                if (e.success) {
                    var collection = e.collections[0];
                    alert('Success:\\n' +
                        'id: ' + collection.id + '\\n' +
                        'name: ' + collection.name + '\\n' +
                        'count: ' + collection.counts.total_photos + '\\n'
                        'updated_at: ' + collection.updated_at);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Show a Photo Collection
    example: |
        This example retrieves information about a photo collection and checks the response.
        
            Cloud.PhotoCollections.show({
                collection_id: savedPhotoCollectionId
            }, function (e) {
                if (e.success) {
                    var collection = e.collections[0];
                    alert('Success:\\n' +
                        'id: ' + collection.id + '\\n' +
                        'name: ' + collection.name + '\\n' +
                        'count: ' + collection.counts.total_photos + '\\n'
                        'updated_at: ' + collection.updated_at);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Search for Photo Collections
    example: |
        This example searches for collections and checks the response.
        
            Cloud.PhotoCollections.search({
                user_id: savedUserId
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.collections.length);
                    for (var i = 0; i < e.collections.length; i++) {
                        var collection = e.collections[i];
                        alert('Success:\\n' +
                            'id: ' + collection.id + '\\n' +
                            'name: ' + collection.name + '\\n' +
                            'count: ' + collection.counts.total_photos + '\\n'
                            'updated_at: ' + collection.updated_at);
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Show Photo Subcollections
    example: |
        This example requests a list of photo subcollections and checks the response.
        
            Cloud.PhotoCollections.showSubcollections({
                page: 1,
                per_page: 20,
                collection_id: savedCollectionId
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.collections.length);
                    for (var i = 0; i < e.collections.length; i++) {
                        var collection = e.collections[i];
                        alert('Success:\\n' +
                            'id: ' + collection.id + '\\n' +
                            'name: ' + collection.name + '\\n' +
                            'count: ' + collection.counts.total_photos + '\\n'
                            'updated_at: ' + collection.updated_at);
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Show Photo Collection Photos
    example: |
        This example requests a list of photos in a photo collections and checks the response.
        
            Cloud.PhotoCollections.showPhotos({
                page: 1,
                per_page: 20,
                collection_id: savedCollectionId
            }, function (e) {
                if (e.success) {
                    if (!e.photos) {
                        alert('Success: No photos');
                    } else {
                        alert('Success:\\n' +
                            'Count: ' + e.collections.length);
                        for (var i = 0; i < e.collections.length; i++) {
                            var collection = e.collections[i];
                            alert('Success:\\n' +
                                'id: ' + collection.id + '\\n' +
                                'name: ' + collection.name + '\\n' +
                                'count: ' + collection.counts.total_photos + '\\n'
                                'updated_at: ' + collection.updated_at);
                        }
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Update a Photo Collection
    example: |
        This example updates a photo collection and checks the response.
        
            Cloud.PhotoCollections.update({
                collection_id: savedPhotoCollectionId,
                cover_photo_id: savedPhotoId
            }, function (e) {
                if (e.success) {
                    var collection = e.collections[0];
                    alert('Success:\\n' +
                        'id: ' + collection.id + '\\n' +
                        'name: ' + collection.name + '\\n' +
                        'count: ' + collection.counts.total_photos + '\\n'
                        'updated_at: ' + collection.updated_at);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Remove a Photo Collection
    example: |
        This example deletes a photo collection and checks the response.
        
            Cloud.PhotoCollections.remove({
                collection_id: savedPhotoCollectionId
            }, function (e) {
                if (e.success) {
                    alert('Success');
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

---
name: CloudPhotoCollectionsResponse
summary: Argument passed to the callback when a request finishes successfully or erroneously.
extends: CloudResponse
properties:
  - name: collections
    summary: Set of `collections` objects, if any exist.
    description: Only included if `success` is `true`.
    type: Array<Dictionary>

---
name: CloudPhotoCollectionsPhotosResponse
summary: Argument passed to the callback when a request finishes successfully or erroneously.
extends: CloudResponse
properties:
  - name: photos
    summary: Set of `photos` objects, if any exist.
    description: Only included if `success` is `true`.
    type: Array<Dictionary>

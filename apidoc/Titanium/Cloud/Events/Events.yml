name: Titanium.Cloud.Events
summary: Provides methods for accessing ACS events.
extends: Titanium.Module
excludes: { methods: [ 'addEventListener', 'fireEvent', 'removeEventListener',  ] }

methods:
  - name: create
    summary: Create a new event.
    description: |
        Requires user login. 
        
        See [Events: Create Event](http://cloud.appcelerator.com/docs/api/v1/events/create)
        for the request parameters supported by this method.
        
        Data is returned in the `events` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudEventsResponse>
  
  - name: show
    summary: Retrieve a list of events.
    description: |
        See [Events: Show Event](http://cloud.appcelerator.com/docs/api/v1/events/show)
        for the request parameters supported by this method.

        Data is returned in the `events` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        optional: true

      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudEventsResponse>

  - name: showOccurrences
    summary: Retrieve a list of event occurrences for a given event.
    description: |
        See [Events: Show Event Occurrences](http://cloud.appcelerator.com/docs/api/v1/events/show_occurrences)
        for the request parameters supported by this method.

        Data is returned in the `event_occurrences` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        optional: true

      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudEventOccurrencesResponse>

  - name: query
    summary: Retrieve a list of events with sorting and pagination.
    description: |
        See [Events: Custom Query Events](http://cloud.appcelerator.com/docs/api/v1/events/query)
        for the request parameters supported by this method.

        Data is returned in the `events` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        optional: true

      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudEventsResponse>

  - name: queryOccurrences
    summary: Retrieve a list of event occurrences with sorting and pagination.
    description: |
        See [Events: Custom Query Event Occurrences](http://cloud.appcelerator.com/docs/api/v1/events/query_occurrences)
        for the request parameters supported by this method.

        Data is returned in the `event_occurrences` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        optional: true

      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudEventOccurrencesResponse>

  - name: search
    summary: Retrieve a list of events with full text search.
    description: |
        See [Events: Search for Events](http://cloud.appcelerator.com/docs/api/v1/events/search)
        for the request parameters supported by this method.

        Data is returned in the `events` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        optional: true

      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudEventsResponse>

  - name: searchOccurrences
    summary: Retrieve a list of event occurrences with full text search.
    description: |
        See [Events: Search for Event Occurrences](http://cloud.appcelerator.com/docs/api/v1/events/search_occurrences)
        for the request parameters supported by this method.

        Data is returned in the `event_occurrences` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        optional: true

      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudEventOccurrencesResponse>

  - name: remove
    summary: Delete a event.
    description: |
        Requires user login. 
        
        See [Events: Delete an Event](http://cloud.appcelerator.com/docs/api/v1/events/delete)
        for the request parameters supported by this method.
        
        Only the user who created the event can delete it.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudEventsResponse>

  - name: update
    summary: Update information about a event.
    description: |
        Requires user login. 
        
        See [Events: Update an Event](http://cloud.appcelerator.com/docs/api/v1/events/update)
        for the request parameters supported by this method.

        Only the user who created the place can update it.

        Data is returned in the `events` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudEventsResponse>

examples:
  - title: Create Event
    example: |
        This example creates a new event and checks the response.
        
            Cloud.Events.create({
                name: 'Celebration',
                start_time: starttime,
                duration: 3600,
                recurring: 'monthly',
                recurring_count: 5
            }, function (e) {
                if (e.success) {
                    var event = e.events[0];
                    alert('Success:\\n' +
                        'id: ' + event.id + '\\n' +
                        'name: ' + event.name + '\\n' +
                        'updated_at: ' + event.updated_at);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Show an Event
    example: |
        This example retrieves information about a event and checks the response.
        
            Cloud.Events.show({
                event_id: savedEventId
            }, function (e) {
                if (e.success) {
                    var event = e.events[0];
                    alert('Success:\\n' +
                        'id: ' + event.id + '\\n' +
                        'name: ' + event.name + '\\n' +
                        'updated_at: ' + event.updated_at);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Show Occurrences for an Event
    example: |
        This example retrieves information about an event's occurrences and checks the response.

            Cloud.Events.showOccurrences({
                event_id: savedEventId
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.event_occurrences.length);
                    for (var i = 0; i < e.event_occurrences.length; i++) {
                        var event = e.event_occurrences[i].event;
                        alert('id: ' + event.id + '\\n' +
                              'name: ' + event.name + '\\n' +
                              'start time: ' + event.start_time + '\\n' +
                              'updated_at: ' + place.updated_at);
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Query Events
    example: |
        This example requests a list of events and checks the response.

            Cloud.Events.query(function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.events.length);
                    for (var i = 0; i < e.events.length; i++) {
                        var event = e.events[i];
                        alert('id: ' + event.id + '\\n' +
                              'name: ' + event.name + '\\n' +
                              'start time: ' + event.start_time + '\\n' +
                              'updated_at: ' + place.updated_at);
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Query Event Occurrences
    example: |
        This example retrieves a list of event occurrences and checks the response.

            Cloud.Events.queryOccurrences(function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.event_occurrences.length);
                    for (var i = 0; i < e.event_occurrences.length; i++) {
                        var event = e.event_occurrences[i].event;
                        alert('id: ' + event.id + '\\n' +
                              'name: ' + event.name + '\\n' +
                              'start time: ' + event.start_time + '\\n' +
                              'updated_at: ' + place.updated_at);
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Search Events
    example: |
        This example requests a list of events and checks the response.

            Cloud.Events.search({
                place_id: savedPlaceId,
                start_time: startTime,
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.events.length);
                    for (var i = 0; i < e.events.length; i++) {
                        var event = e.events[i];
                        alert('id: ' + event.id + '\\n' +
                              'name: ' + event.name + '\\n' +
                              'start time: ' + event.start_time + '\\n' +
                              'updated_at: ' + place.updated_at);
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Search Event Occurrences
    example: |
        This example retrieves a list of event occurrences and checks the response.

            Cloud.Events.searchOccurrences({
                place_id: savedPlaceId,
                start_time: startTime
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.event_occurrences.length);
                    for (var i = 0; i < e.event_occurrences.length; i++) {
                        var event = e.event_occurrences[i].event;
                        alert('id: ' + event.id + '\\n' +
                              'name: ' + event.name + '\\n' +
                              'start time: ' + event.start_time + '\\n' +
                              'updated_at: ' + place.updated_at);
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Search for events
    example: |
        This example searches for events and checks the response.
        
            Cloud.Events.search({
                latitude: lat,
                longitude: lon
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.events.length);
                    for (var i = 0; i < e.events.length; i++) {
                        var event = e.events[i];
                        alert('id: ' + event.id + '\\n' +
                              'name: ' + event.name + '\\n' +
                              'longitude: ' + event.longitude + '\\n' +
                              'latitude: ' + event.latitude + '\\n' +
                              'updated_at: ' + event.updated_at);
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Update an Event
    example: |
        This example updates a event and checks the response.
        
            Cloud.Events.update({
                event_id: savedEventId,
                name: 'Annual Celebration',
                start_time: starttime,
                duration: 3600,
                recurring: 'monthly',
                recurring_count: 5
            }, function (e) {
                if (e.success) {
                    var event = e.events[0];
                    alert('Success:\\n' +
                        'id: ' + event.id + '\\n' +
                        'name: ' + event.name + '\\n' +
                        'updated_at: ' + event.updated_at);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Remove an Event
    example: |
        This example deletes a event and checks the response.
        
            Cloud.Events.remove({
                event_id: savedEventId
            }, function (e) {
                if (e.success) {
                    alert('Removed');
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

---
name: CloudEventsResponse
summary: Argument passed to the callback when a request finishes successfully or erroneously.
extends: CloudResponse
properties:
  - name: events
    summary: Set of `event` objects, if any exist.
    description: Only included if `success` is `true`.
    type: Array<Dictionary>

---
name: CloudEventOccurrencesResponse
summary: Argument passed to the callback when a request finishes successfully or erroneously.
extends: CloudResponse
properties:
  - name: event_occurrences
    summary: Set of `event` objects, if any exist.
    description: Only included if `success` is `true`.
    type: Array<Dictionary>

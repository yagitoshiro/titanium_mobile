name: Titanium.Cloud.Photos
summary: Provides methods for accessing ACS photos.
extends: Titanium.Module
excludes: { methods: [ 'addEventListener', 'fireEvent', 'removeEventListener',  ] }

methods:
  - name: create
    summary: Create or upload a new photo.
    description: |
        Requires user login. 
        
        See [Photos: Create (Upload) a Photo](http://cloud.appcelerator.com/docs/api/v1/photos/create)
        for the request parameters supported by this method.
        
        Data is returned in the `photos` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
      
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotosResponse>
  
  - name: query
    summary: Retrieve a list of photos with sorting and pagination.
    description: |
        See [Photos: Custom Query Photos](http://cloud.appcelerator.com/docs/api/v1/photos/query)
        for the request parameters supported by this method.
        
        Data is returned in the `photos` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        optional: true
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotosResponse>
  
  - name: remove
    summary: Delete a photo.
    description: |
        Requires user login. 
        
        See [Photos: Delete a Photo](http://cloud.appcelerator.com/docs/api/v1/photos/delete)
        for the request parameters supported by this method.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotosResponse>
  
  - name: search
    summary: Retrieve a list of photos.
    description: |
        See [Photos: Search for Photos](http://cloud.appcelerator.com/docs/api/v1/photos/search)
        for the request parameters supported by this method.
        
        Data is returned in the `photos` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotosResponse>
  
  - name: show
    summary: Retrieve information about a photo.
    description: |
        See [Photos: Show Photo Info](http://cloud.appcelerator.com/docs/api/v1/photos/show)
        for the request parameters supported by this method.
        
        Data is returned in the `photos` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
      
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotosResponse>
  
  - name: update
    summary: Update a photo.
    description: |
        Requires user login. 
        
        See [Photos: Update a Photo](http://cloud.appcelerator.com/docs/api/v1/photos/update)
        for the request parameters supported by this method.
        
        Data is returned in the `photos` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudPhotosResponse>

examples:
  - title: Create Photo
    example: |
        This example creates a new photo and checks the response.

            Cloud.Photos.create({
                photo: Titanium.Filesystem.getFile('photo.jpg')
            }, function (e) {
                if (e.success) {
                    var photo = e.photos[0];
                    alert('Success:\\n' +
                        'id: ' + photo.id + '\\n' +
                        'filename: ' + photo.filename + '\\n' +
                        'size: ' + photo.size,
                        'updated_at: ' + photo.updated_at);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Show a Photo
    example: |
        This example retrieves information about a photo and checks the response.

            Cloud.Photos.show({
                photo_id: savedPhotoId
            }, function (e) {
                if (e.success) {
                    var photo = e.photos[0];
                    alert('Success:\\n' +
                        'id: ' + photo.id + '\\n' +
                        'filename: ' + photo.filename + '\\n' +
                        'updated_at: ' + photo.updated_at);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Search for Photos
    example: |
        This example searches for photos and checks the response.

            Cloud.Photos.search({
                user_id: savedUserId
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.photos.length);
                    for (var i = 0; i < e.photos.length; i++) {
                        var photo = e.photos[i];
                        alert('id: ' + photo.id + '\\n' +
                              'name: ' + photo.name + '\\n' +
                              'filename: ' + photo.filename + '\\n' +
                              'updated_at: ' + photo.updated_at);
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Query for Photos
    example: |
        This example requests a list of photos and checks the response.

            Cloud.Photos.query({
                page: 1,
                per_page: 20,
                where: {
                    coordinates: {
                        '$nearSphere': [-122.23,37.12],
                        '$maxDistance': 0.00126
                    }
                }
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.photos.length);
                    for (var i = 0; i < e.photos.length; i++) {
                        var photo = e.photos[i];
                        alert('id: ' + photo.id + '\\n' +
                              'name: ' + photo.name + '\\n' +
                              'filename: ' + photo.filename + '\\n' +
                              'updated_at: ' + photo.updated_at);
                    }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Update a Photo
    example: |
        This example updates a photo and checks the response.

            Cloud.Photos.update({
                photo_id: savedPhotoId,
                photo: Titanium.Filesystem.getFile('newphoto.jpg'),
                tags: 'mountains'
            }, function (e) {
                if (e.success) {
                    var photo = e.photos[0];
                    alert('Success:\\n' +
                        'id: ' + photo.id + '\\n' +
                        'filename: ' + photo.filename + '\\n' +
                        'updated_at: ' + photo.updated_at);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Remove a Photo
    example: |
        This example deletes a photo and checks the response.

            Cloud.Photos.remove({
                photo_id: savedPhotoId
            }, function (e) {
                if (e.success) {
                    alert('Success');
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

---
name: CloudPhotosResponse
summary: Argument passed to the callback when a request finishes successfully or erroneously.
extends: CloudResponse
properties:
  - name: photos
    summary: Set of `photos` objects, if any exist.
    description: Only included if `success` is `true`.
    type: Array<Dictionary>

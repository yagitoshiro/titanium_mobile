name: Titanium.Cloud.Users
summary: Provides methods for accessing ACS user objects.
extends: Titanium.Module
excludes: { methods: [ 'addEventListener', 'fireEvent', 'removeEventListener',  ] }

methods:
  - name: create
    summary: Create a new user.
    description: |
        See [Users: Create User](http://cloud.appcelerator.com/docs/api/v1/users/create)
        for the request parameters supported by this method.
        
        Data is returned in the `users` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary

      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudUsersResponse>
    
  - name: login
    summary: Log in a user.
    description: |
        See [Users: Login User](http://cloud.appcelerator.com/docs/api/v1/users/login)
        for the request parameters supported by this method.
        
        Data is returned in the `users` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudUsersResponse>
    
  - name: logout
    summary: Log out the current user.
    description: |
        Requires user login. 
        
        See [Users: Logout User](http://cloud.appcelerator.com/docs/api/v1/users/logout)
        for the request parameters supported by this method.
        
        Data is returned in the `users` property of the parameter passed to the callback.
    parameters:
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudUsersResponse>
    
  - name: query
    summary: Retrieve a list of users with sorting and pagination.
    description: |
        See [Users: Custom Query of Users](http://cloud.appcelerator.com/docs/api/v1/users/query)
        for the request parameters supported by this method.
        
        Data is returned in the `users` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        optional: true
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudUsersResponse>
    
  - name: search
    summary: Retrieve a list of users based on the specified search criteria.
    description: |
        See [Users: Search Users](http://cloud.appcelerator.com/docs/api/v1/users/search)
        for the request parameters supported by this method.
        
        Data is returned in the `users` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        optional: true
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudUsersResponse>
    
  - name: show
    summary: Show public user information.
    description: |
        See [Users: Show User Profile](http://cloud.appcelerator.com/docs/api/v1/users/show)
        for the request parameters supported by this method.
        
        Data is returned in the `users` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudUsersResponse>
    
  - name: showMe
    summary: Show both public and private information about the user currently logged in.
    description: |
        Requires user login. 
        
        See [Users: Show Current User Profile](http://cloud.appcelerator.com/docs/api/v1/users/showme)
        for the request parameters supported by this method.
        
        Data is returned in the `users` property of the parameter passed to the callback.
    parameters:
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudUsersResponse>
    
  - name: update
    summary: Update the current user.
    description: |
        Requires user login. 
        
        See [Users: Update Current User](http://cloud.appcelerator.com/docs/api/v1/users/update)
        for the request parameters supported by this method.
        
        Data is returned in the `users` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudUsersResponse>
    
  - name: remove
    summary: Delete the current user.
    description: |
        Requires user login. 
        
        See [Users: Delete User](http://cloud.appcelerator.com/docs/api/v1/users/delete)
        for the request parameters supported by this method.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudUsersResponse>
    
  - name: requestResetPassword
    summary: Send an email to user to recover lost password.
    description: |
        See [Users: Send a reset password email to User](http://cloud.appcelerator.com/docs/api/v1/users/reset_password)
        for the request parameters supported by this method.
        
        Data is returned in the `users` property of the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: Parameters to send in the request.
        type: Dictionary
        
      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudUsersResponse>

  - name: secureCreate
    since: 2.1.2
    platforms: [android, iphone, ipad]
    summary: Create a new user using 3-Legged OAuth.
    description: |
        Invokes a modal dialog that allows the authentication server to display a
        web page for creating a new user.

        See [Authentication](http://cloud.appcelerator.com/docs/authentication)
        for instructions on enabling 3-Legged OAuth for your application.

        Authentication data is returned in the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: A dictionary of properties for the request.
        type: Dictionary<CloudUsersSecureDialog>
        optional: true

      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudUsersSecureResponse>

  - name: secureLogin
    since: 2.1.2
    platforms: [android, iphone, ipad]
    summary: Log in a user using 3-Legged OAuth.
    description: |
        Invokes a modal dialog that allows the authentication server to display a
        web page for authenticating a user.

        See [Authentication](http://cloud.appcelerator.com/docs/authentication)
        for instructions on enabling 3-Legged OAuth for your application.

        Authentication data is returned in the parameter passed to the callback.
    parameters:
      - name: parameters
        summary: A dictionary of properties for the request.
        type: Dictionary<CloudUsersSecureDialog>
        optional: true

      - name: callback
        summary: Callback function to execute when the method completes.
        type: Callback<CloudUsersSecureResponse>

  - name: secureStatus
    since: 2.1.2
    platforms: [android, iphone, ipad]
    summary: Checks if the user is authenticated with 3-Legged OAuth.
    description: |
        True is returned after successfully calling <Titanium.Cloud.Users.secureCreate> or
        <Titanium.Cloud.Users.secureLogin>, and false after successfully calling
        <Titanium.Cloud.Users.logout>.
    returns:
        type: Boolean

examples:
  - title: Create User
    example: |
        This example creates a new user and checks the response.
        
            Cloud.Users.create({
                email: 'test@mycompany.com',
                first_name: 'test_firstname',
                last_name: 'test_lastname',
                password: 'test_password',
                password_confirmation: 'test_password'
            }, function (e) {
                if (e.success) {
                    var user = e.users[0];
                    alert('Success:\\n' +
                        'id: ' + user.id + '\\n' +
                        'first name: ' + user.first_name + '\\n' +
                        'last name: ' + user.last_name);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Log in User
    example: |
        This example logs a user in and checks the response.
        
            Cloud.Users.login({
                login: 'test@mycompany.com',
                password: 'test_password'
            }, function (e) {
                if (e.success) {
                    var user = e.users[0];
                    alert('Success:\\n' +
                        'id: ' + user.id + '\\n' +
                        'first name: ' + user.first_name + '\\n' +
                        'last name: ' + user.last_name);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Show User
    example: |
        This example requests information about a user and checks the response.
        
            Cloud.Users.show({
                user_id: savedUserInfo.id
            }, function (e) {
                if (e.success) {
                    var user = e.users[0];
                    alert('Success:\\n' +
                        'id: ' + user.id + '\\n' +
                        'first name: ' + user.first_name + '\\n' +
                        'last name: ' + user.last_name);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Show Current User
    example: |
        This example requests information about the currently logged in user and checks the response.
        
            Cloud.Users.showMe(function (e) {
                if (e.success) {
                    var user = e.users[0];
                    alert('Success:\\n' +
                        'id: ' + user.id + '\\n' +
                        'first name: ' + user.first_name + '\\n' +
                        'last name: ' + user.last_name);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Search for Users
    example: |
        This example requests information about particular users and checks the response.
        
            Cloud.Users.search({
                q: 'test'
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.users.length);
                    for (var i = 0; i < e.users.length; i++) {
                        var user = e.users[i];
                        alert('id: ' + user.id + '\\n' +
                            'first name: ' + user.first_name + '\\n' +
                            'last name: ' + user.last_name);
                     }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Query for Users
    example: |
        This example requests information about specific users and checks the response.
        
            Cloud.Users.query({
                page: 1,
                per_page: 10,
                where: {
                    age: { '$gt': 28 },
                    favorite_color: 'blue',
                    first_name: 'joe'
                }
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'Count: ' + e.users.length);
                    for (var i = 0; i < e.users.length; i++) {
                        var user = e.users[i];
                        alert('id: ' + user.id + '\\n' +
                            'first name: ' + user.first_name + '\\n' +
                            'last name: ' + user.last_name);
                     }
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Update User
    example: |
        This example updates information about the currently logged in user and checks the response.
        
            Cloud.Users.update({
                email: 'joeuser@mycompany.com',
                first_name: 'joe',
                last_name: 'user',
                custom_fields: {
                    favorite_color: 'blue',
                    age: 25
                }
            }, function (e) {
                if (e.success) {
                    var user = e.users[0];
                    alert('Success:\\n' +
                        'id: ' + user.id + '\\n' +
                        'first name: ' + user.first_name + '\\n' +
                        'last name: ' + user.last_name);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Logout User
    example: |
        This example logs out the current user and checks the response.
        
            Cloud.Users.logout(function (e) {
                if (e.success) {
                    alert('Success: Logged out');
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Remove User
    example: |
        This example deletes the current user and checks the response.
        
            Cloud.Users.remove(function (e) {
                if (e.success) {
                    alert('Success: Removed');
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });
  
  - title: Request Reset Password User
    example: |
        This example requests a password reset for a user and checks the response.
        
            Cloud.Users.requestResetPassword({
                email: 'joeuser@mycompany.com'
            }, function (e) {
                if (e.success) {
                    alert('Success: Reset Request Sent');
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Create User Using 3-Legged OAuth
    example: |
        This example creates a new user using 3-Legged OAuth and checks the response.

            Cloud.Users.secureCreate({
                title: 'Sign Up Here'
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'accessToken: ' + e.accessToken + '\\n' +
                        'expiresIn: ' + e.expiresIn);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

  - title: Log in User Using 3-Legged OAuth
    example: |
        This example logs a user in using 3-Legged OAuth and checks the response.

            Cloud.Users.secureLogin({
                title: 'Log In Here'
            }, function (e) {
                if (e.success) {
                    alert('Success:\\n' +
                        'accessToken: ' + e.accessToken + '\\n' +
                        'expiresIn: ' + e.expiresIn);
                } else {
                    alert('Error:\\n' +
                        ((e.error && e.message) || JSON.stringify(e)));
                }
            });

---
name: CloudUsersSecureDialog
summary: Properties for the modal dialog used in 3-Legged OAuth
properties:
  - name: title
    summary: Defines the title for the dialog.
    type: String
    default: 'Appcelerator Cloud Service'

---
name: CloudUsersResponse
summary: Argument passed to the callback when a request finishes successfully or erroneously.
extends: CloudResponse
properties:
  - name: users
    summary: Set of `user` objects, if any exist.
    description: Only included if `success` is `true`.
    type: Array<Dictionary>

---
name: CloudUsersSecureResponse
summary: Argument passed to the callback when a request finishes successfully or erroneously.
extends: CloudResponse
properties:
  - name: accessToken
    summary: Identifies the current access token when using 3-Legged OAuth.
    description: Only included if `success` is `true`.
    type: String

  - name: expiresIn
    summary: Indicates the number of seconds before the access token expires.
    description: Only included if `success` is `true`.
    type: Number

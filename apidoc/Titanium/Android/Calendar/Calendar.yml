---
name: Titanium.Android.Calendar
summary: |
    The Android.Calendar module provides proxies and methods for accessing the native Android 
    calendar functionality.
description: |
    This module supports retrieving information about existing events and creating new events.  
    However, modifying or deleting existing events is not yet supported.  
    Additionally, recurring events are not yet supported.
extends: Titanium.Module
platforms: [android]
since: "1.5"
createable: false

methods:
  - name: getCalendarById
    summary: Gets the calendar with the specified identifier.
    returns:
        type: Titanium.Android.Calendar.Calendar
    parameters:
      - name: id
        summary: Integer identifier of the calendar.
        type: Number
        
properties:
  - name: METHOD_ALERT
    summary: Reminder alert delivery method.
    description: |
        Used with <Titanium.Android.Calendar.Reminder>.
        
        One of the group of reminder method constants, 
        [METHOD_ALERT](Titanium.Android.Calendar.METHOD_ALERT), 
        [METHOD_DEFAULT](Titanium.Android.Calendar.METHOD_DEFAULT), 
        [METHOD_EMAIL](Titanium.Android.Calendar.METHOD_EMAIL), 
        and [METHOD_SMS](Titanium.Android.Calendar.METHOD_SMS).
    type: Number
    permission: read-only
    
  - name: METHOD_DEFAULT
    summary: Reminder default delivery method.
    description: |
        Used with <Titanium.Android.Calendar.Reminder>.
        
        One of the group of reminder method constants, 
        [METHOD_ALERT](Titanium.Android.Calendar.METHOD_ALERT), 
        [METHOD_DEFAULT](Titanium.Android.Calendar.METHOD_DEFAULT), 
        [METHOD_EMAIL](Titanium.Android.Calendar.METHOD_EMAIL), 
        and [METHOD_SMS](Titanium.Android.Calendar.METHOD_SMS).
    type: Number
    permission: read-only
    
  - name: METHOD_EMAIL
    summary: Reminder email delivery method.
    description: |
        Used with <Titanium.Android.Calendar.Reminder>.
        
        One of the group of reminder method constants, 
        [METHOD_ALERT](Titanium.Android.Calendar.METHOD_ALERT), 
        [METHOD_DEFAULT](Titanium.Android.Calendar.METHOD_DEFAULT), 
        [METHOD_EMAIL](Titanium.Android.Calendar.METHOD_EMAIL), 
        and [METHOD_SMS](Titanium.Android.Calendar.METHOD_SMS).
    type: Number
    permission: read-only
    
  - name: METHOD_SMS
    summary: Reminder SMS delivery method.
    description: |
        Used with <Titanium.Android.Calendar.Reminder>.
        
        One of the group of reminder method constants, 
        [METHOD_ALERT](Titanium.Android.Calendar.METHOD_ALERT), 
        [METHOD_DEFAULT](Titanium.Android.Calendar.METHOD_DEFAULT), 
        [METHOD_EMAIL](Titanium.Android.Calendar.METHOD_EMAIL), 
        and [METHOD_SMS](Titanium.Android.Calendar.METHOD_SMS).
    type: Number
    permission: read-only
    
  - name: STATE_DISMISSED
    summary: Alert dismissed state.
    description: |
        Used with <Titanium.Android.Calendar.Alert>.
        
        One of the group of reminder method constants, 
        [STATE_DISMISSED](Titanium.Android.Calendar.STATE_DISMISSED), 
        [STATE_FIRED](Titanium.Android.Calendar.STATE_FIRED), 
        and [STATE_SCHEDULED](Titanium.Android.Calendar.STATE_SCHEDULED).
    type: Number
    permission: read-only
    
  - name: STATE_FIRED
    summary: Alert fired state.
    description: |
        Used with <Titanium.Android.Calendar.Alert>.
        
        One of the group of reminder method constants, 
        [STATE_DISMISSED](Titanium.Android.Calendar.STATE_DISMISSED), 
        [STATE_FIRED](Titanium.Android.Calendar.STATE_FIRED), 
        and [STATE_SCHEDULED](Titanium.Android.Calendar.STATE_SCHEDULED).
    type: Number
    permission: read-only
    
  - name: STATE_SCHEDULED
    summary: Alert scheduled status.
    description: |
        Used with <Titanium.Android.Calendar.Alert>.
        
        One of the group of reminder method constants, 
        [STATE_DISMISSED](Titanium.Android.Calendar.STATE_DISMISSED), 
        [STATE_FIRED](Titanium.Android.Calendar.STATE_FIRED), 
        and [STATE_SCHEDULED](Titanium.Android.Calendar.STATE_SCHEDULED).
    type: Number
    permission: read-only
    
  - name: STATUS_CANCELED
    summary: Event canceled status.
    description: |
        Used with <Titanium.Android.Calendar.Event>.
        
        One of the group of reminder method constants, 
        [STATUS_CANCELED](Titanium.Android.Calendar.STATUS_CANCELED), 
        [STATUS_CONFIRMED](Titanium.Android.Calendar.STATUS_CONFIRMED), 
        and [STATUS_TENTATIVE](Titanium.Android.Calendar.STATUS_TENTATIVE).
    type: Number
    permission: read-only
    
  - name: STATUS_CONFIRMED
    summary:  Event confirmed status.
    description: |
        Used with <Titanium.Android.Calendar.Event>.
        
        One of the group of reminder method constants, 
        [STATUS_CANCELED](Titanium.Android.Calendar.STATUS_CANCELED), 
        [STATUS_CONFIRMED](Titanium.Android.Calendar.STATUS_CONFIRMED), 
        and [STATUS_TENTATIVE](Titanium.Android.Calendar.STATUS_TENTATIVE).
    type: Number
    permission: read-only
    
  - name: STATUS_TENTATIVE
    summary: Event tentative status.
    description: |
        Used with <Titanium.Android.Calendar.Event>.
        
        One of the group of reminder method constants, 
        [STATUS_CANCELED](Titanium.Android.Calendar.STATUS_CANCELED), 
        [STATUS_CONFIRMED](Titanium.Android.Calendar.STATUS_CONFIRMED), 
        and [STATUS_TENTATIVE](Titanium.Android.Calendar.STATUS_TENTATIVE).
    type: Number
    permission: read-only
    
  - name: VISIBILITY_CONFIDENTIAL
    summary: Event confidential visibility.
    description: |
        Used with <Titanium.Android.Calendar.Event>.
        
        One of the group of reminder method constants, 
        [VISIBILITY_CONFIDENTIAL](Titanium.Android.Calendar.VISIBILITY_CONFIDENTIAL), 
        [VISIBILITY_DEFAULT](Titanium.Android.Calendar.VISIBILITY_DEFAULT), 
        [VISIBILITY_PRIVATE](Titanium.Android.Calendar.VISIBILITY_PRIVATE), 
        and [VISIBILITY_PUBLIC](Titanium.Android.Calendar.VISIBILITY_PUBLIC).
    type: Number
    permission: read-only
    
  - name: VISIBILITY_DEFAULT
    summary: Event default visibility.
    description: |
        Used with <Titanium.Android.Calendar.Event>.
        
        One of the group of reminder method constants, 
        [VISIBILITY_CONFIDENTIAL](Titanium.Android.Calendar.VISIBILITY_CONFIDENTIAL), 
        [VISIBILITY_DEFAULT](Titanium.Android.Calendar.VISIBILITY_DEFAULT), 
        [VISIBILITY_PRIVATE](Titanium.Android.Calendar.VISIBILITY_PRIVATE), 
        and [VISIBILITY_PUBLIC](Titanium.Android.Calendar.VISIBILITY_PUBLIC).
    type: Number
    permission: read-only
    
  - name: VISIBILITY_PRIVATE
    summary: Event private visibility.
    description: |
        Used with <Titanium.Android.Calendar.Event>.
        
        One of the group of reminder method constants, 
        [VISIBILITY_CONFIDENTIAL](Titanium.Android.Calendar.VISIBILITY_CONFIDENTIAL), 
        [VISIBILITY_DEFAULT](Titanium.Android.Calendar.VISIBILITY_DEFAULT), 
        [VISIBILITY_PRIVATE](Titanium.Android.Calendar.VISIBILITY_PRIVATE), 
        and [VISIBILITY_PUBLIC](Titanium.Android.Calendar.VISIBILITY_PUBLIC).
    type: Number
    permission: read-only
    
  - name: VISIBILITY_PUBLIC
    summary: Event public visibility.
    description: |
        Used with <Titanium.Android.Calendar.Event>.
        
        One of the group of reminder method constants, 
        [VISIBILITY_CONFIDENTIAL](Titanium.Android.Calendar.VISIBILITY_CONFIDENTIAL), 
        [VISIBILITY_DEFAULT](Titanium.Android.Calendar.VISIBILITY_DEFAULT), 
        [VISIBILITY_PRIVATE](Titanium.Android.Calendar.VISIBILITY_PRIVATE), 
        and [VISIBILITY_PUBLIC](Titanium.Android.Calendar.VISIBILITY_PUBLIC).
    type: Number
    permission: read-only
    
  - name: allAlerts
    summary: All alerts in selected calendars.
    type: Array<Titanium.Android.Calendar.Alert>
    permission: read-only
    
  - name: allCalendars
    summary: All calendars known to the native calendar app.
    type: Array<Titanium.Android.Calendar.Calendar>
    permission: read-only
    
  - name: selectableCalendars
    summary: |
        All calendars selected within the native calendar app, which may be a subset of `allCalendars`. 
    description: |
        The native calendar application may know via the registered webservices, such as Gooogle or 
        Facebook accounts about calendars that it has access to but have not been selected to be 
        displayed in the native calendar app.
    type: Array<Titanium.Android.Calendar.Calendar>
    permission: read-only
    
examples:
  - title: All Calendars vs Selectable Calendars
    example: |
        Print the names of all calendars known to Android, and the names of calendars that 
        have been selected in the native Android calendar application.
        
            function showCalendars(calendars) {
                for (var i = 0; i < calendars.length; i++) {
                    Ti.API.info(calendars[i].name);
                }
            }
            
            Ti.API.info('ALL CALENDARS:');
            showCalendars(Ti.Android.Calendar.allCalendars);
            Ti.API.info('SELECTABLE CALENDARS:');
            showCalendars(Ti.Android.Calendar.selectableCalendars);
        
  - title: Events in a year
    example: |
        Create a picker to allow an existing calendar to be selected and, when a button is clicked, 
        generate details of all events in that calendar for the current year .
        
            var calendars = [];
            var selectedCalendarName;
            var selectedCalendarId;
            var pickerData = [];
            
            var win = Ti.UI.createWindow({
              backgroundColor: 'white',
              exitOnClose: true,
              fullscreen: false,
              layout: 'vertical',
              title: 'Calendar Demo'
            });
            
            var scrollView = Ti.UI.createScrollView({
              backgroundColor: '#eee',
              height: 500,
              top: 20
            });
            
            var label = Ti.UI.createLabel({
              backgroundColor: 'white',
              text: 'Click on the button to display the events for the selected calendar',
              textAlign: Ti.UI.TEXT_ALIGNMENT_CENTER,
              top: 20
            });
            scrollView.add(label);
            
            var selectableCalendars = Ti.Android.Calendar.selectableCalendars;
            for (var i = 0, ilen = selectableCalendars.length; i < ilen; i++) {
              calendars.push({ name: selectableCalendars[i].name, id: selectableCalendars[i].id });
              pickerData.push( Ti.UI.createPickerRow({ title: calendars[i].name }) );
              if(i === 0){
                selectedCalendarName = selectableCalendars[i].name;
                selectedCalendarId = selectableCalendars[i].id;
              }
            }
            var selectableCalendars = null;
            
            if(!calendars.length){
              label.text = 'No calendars available. Select at least one in the native calendar before using this app';
            } else {
              label.text = 'Click button to view calendar events';
              
              var picker = Ti.UI.createPicker({
                top:20
              });
              
              picker.add(pickerData);
              win.add(picker);
              
              picker.addEventListener('change', function(e){
                for (var i = 0, ilen = calendars.length; i < ilen; i++) {
                  if(calendars[i].name === e.row.title){
                    selectedCalendarName = calendars[i].name;
                    selectedCalendarId = calendars[i].id;
                  }
                }
              });
              
              var button = Ti.UI.createButton({
                title: 'View events',
                top: 20
              });
              win.add(button);
              
              button.addEventListener('click', function(e){
                label.text = 'Generating...';
                
                var currentYear = new Date().getFullYear();
                
                var consoleString = '';
                
                function print(s) {
                  if (consoleString.length) {
                    consoleString = consoleString + '\n';
                  }
                  consoleString = consoleString + s;
                }
                
                var calendar = Ti.Android.Calendar.getCalendarById(selectedCalendarId);
                
                function printReminder(r) {
                  var typetext = '[method unknown]';
                  if (r.method == Ti.Android.Calendar.METHOD_EMAIL) {
                    typetext = 'Email';
                  } else if (r.method == Ti.Android.Calendar.METHOD_SMS) {
                    typetext = 'SMS';
                  } else if (r.method == Ti.Android.Calendar.METHOD_ALERT) {
                    typetext = 'Alert';
                  } else if (r.method == Ti.Android.Calendar.METHOD_DEFAULT) {
                    typetext = '[default reminder method]';
                  }
                  print(typetext + ' reminder to be sent ' + r.minutes + ' minutes before the event');
                }
                
                function printAlert(a) {
                  print('Alert id ' + a.id + ' begin ' + a.begin + '; end ' + a.end + '; alarmTime ' + a.alarmTime + '; minutes ' + a.minutes);
                }
                
                function printEvent(event) {
                  if (event.allDay) {
                    print('Event: ' + event.title + '; ' + event.begin.toLocaleDateString() + ' (all day)');
                  } else {
                    print('Event: ' + event.title + '; ' + event.begin.toLocaleDateString() + ' ' + event.begin.toLocaleTimeString()+ '-' + event.end.toLocaleTimeString());
                  }
                  
                  var reminders = event.reminders;
                  if (reminders && reminders.length) {
                    print('There is/are ' + reminders.length + ' reminder(s)');
                    for (var i = 0; i < reminders.length; i++) {
                      printReminder(reminders[i]);
                    }
                  }
                  
                  print('hasAlarm? ' + event.hasAlarm);
                  var alerts = event.alerts;
                  if (alerts && alerts.length) {
                    for (var i = 0; i < alerts.length; i++) {
                      printAlert(alerts[i]);
                    }
                  }
                  
                  var status = event.status;
                  if (status == Ti.Android.Calendar.STATUS_TENTATIVE) {
                    print('This event is tentative');
                  }
                  if (status == Ti.Android.Calendar.STATUS_CONFIRMED) {
                    print('This event is confirmed');
                  }
                  if (status == Ti.Android.Calendar.STATUS_CANCELED) {
                    print('This event was canceled');
                  }
                }
                
                var events = calendar.getEventsInYear(currentYear);
                if (events && events.length) {
                  print(events.length + ' event(s) in ' + currentYear);
                  print('');
                  for (var i = 0; i < events.length; i++) {
                    printEvent(events[i]);
                    print('');
                  }
                } else {
                  print('No events');
                }
                
                label.text = consoleString;
              });
            }
            
            win.add(scrollView);
            
            win.open();

  - title: Create an Event and Reminder
    example: |
        Creates an event and adds an e-mail reminder for 10 minutes before the event.
        
            var CALENDAR_TO_USE = 3;
            var calendar = Ti.Android.Calendar.getCalendarById(CALENDAR_TO_USE);
            
            // Create the event
            var eventBegins = new Date(2010, 11, 26, 12, 0, 0);
            var eventEnds = new Date(2010, 11, 26, 14, 0, 0);
            var details = {
                title: 'Do some stuff',
                description: "I'm going to do some stuff at this time.",
                begin: eventBegins,
                end: eventEnds
            };
            
            var event = calendar.createEvent(details);
            
            // Now add a reminder via e-mail for 10 minutes before the event.
            var reminderDetails = {
                minutes: 10,
                method: Ti.Android.Calendar.METHOD_EMAIL
            };
            event.createReminder(reminderDetails);
